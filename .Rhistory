substrate_residues <- df_volcano_plot_regions %>% filter(Site %in% c('DHF binding', 'Binding only NADPH'))
df_volcano_plot_regions %<>%
mutate(color_legend = case_when(
stop_check == 'Stop' ~ 'Stop',
Site == 'DHF binding' ~ 'DHF binding',
Site == 'Binding only NADPH' ~ 'Binding only NADPH',
TRUE ~ 'Missense'
)) %>%
mutate(color_legend = factor(color_legend, levels = c('Missense', 'Stop', 'DHF binding', 'Binding only NADPH')))
dms_data_final_CDS <- dms_data_final
dms_data_final_CDS
dms_data_final_EMPTY
dms_data_final_both <- inner_join(x = dms_data_final_CDS %>%
mutate(Selection_coefficient_CDS = Selection_coefficient) %>%
select(-Selection_coefficient),
y = dms_data_final_EMPTY %>%
mutate(Selection_coefficient_EMPTY = Selection_coefficient) %>%
select(-Selection_coefficient),
by = c('Mutation'))
## Save this data frame
write.table(dms_data_final_both, append = F, quote = F, sep = '\t', row.names = F, col.names = T,
file = 'Data/dms_data_final_both.tsv')
432
View(dms_data_final_both)
dms_data_final_both <- inner_join(x = dms_data_final_CDS %>%
mutate(Selection_coefficient_Duplicated = Selection_coefficient) %>%
select(-Selection_coefficient),
y = dms_data_final_EMPTY %>%
mutate(Selection_coefficient_Singleton = Selection_coefficient) %>%
select(-Selection_coefficient),
by = c('Mutation'))
## Save this data frame
write.table(dms_data_final_both, append = F, quote = F, sep = '\t', row.names = F, col.names = T,
file = 'Data/dms_data_final_both.tsv')
dms_data_final_both_long <- dms_data_final_both %>% ungroup() %>%
group_by(Mutation) %>%
pivot_longer(cols = c('Selection_coefficient_Duplicated', 'Selection_coefficient_Singleton'),
names_to = 'Condition', names_prefix = 'Selection_coefficient_',
values_to = 'Selection_coefficient') %>%
mutate(Condition = factor(Condition, levels = c('Singleton', 'Duplicated')))
View(dms_data_final_both_long)
## Add the distribution of stop codons as a point with errorbars
df_stop_info <- data.frame(Condition = c('Singleton', 'Duplicated'),
mean_stop = c(mean_stop_EMPTY, mean_stop_CDS),
stop_high = c(stop_EMPTY_high, stop_CDS_high),
stop_low = c(stop_EMPTY_low, stop_CDS_low))
p_fig3A_boxplot <- dms_data_final_both_long %>%
## Add a label to make interfering mutations blue
mutate(color_bool = ifelse(and(Selection_coefficient < stop_CDS_low, Condition == 'Duplicated'),
'Negative interference', 'Other'
)
) %>%
ggplot(aes(x = Condition, y = Selection_coefficient)) +
geom_line(aes(group = Mutation), alpha = 0.1) +
geom_jitter(width = 0.025, aes(colour = color_bool)) +
scale_colour_manual(values = c('#1a53ff', 'black')) +
geom_violin(width = 0.7, alpha = 0.3, scale = 'width') +
geom_boxplot(outlier.shape = NA, width = 0.5, alpha= 0.3) +
xlab('') + ylab('Selection coefficient') +
geom_hline(yintercept = 0, linetype = 'dashed') +
geom_point(data = df_stop_info, colour = 'red', size = 3, aes(y = mean_stop)) +
geom_errorbar(data = df_stop_info, colour = 'red', inherit.aes = F,
aes(x = Condition, ymax = stop_high, ymin = stop_low),
width = 0.1, linewidth = 1.2
) +
theme(
axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
legend.position = 'none',
legend.justification = 'center'
) +
stat_compare_means(
method = 'wilcox.test',
paired = T, aes(group = Mutation),
comparisons = list(c('Singleton', 'Duplicated')),
size = 4
) +
ylim(-1, 0.7) +
labs(colour = '') +
guides(colour=guide_legend(nrow=2,byrow=TRUE))
p_fig3A_boxplot
## Check which mutants in single copy were below the lower end of the stop codon distribution
single_copy_DN <- dms_data_final_both_long %>%
filter(Condition == 'Singleton', Selection_coefficient <= stop_EMPTY_low)
View(single_copy_DN)
## Same for the CDS data
neg_dom_check <- dms_data_final_both_long %>%
filter(Condition == 'Duplicated', Selection_coefficient <= stop_CDS_low)
## Filter to get a count of missense mutations
missense_mut <- dms_data_final %>%
separate(Mutation, into = c('WT_Residue', 'Position', 'Mutant_Residue'), sep = c(1, -1)) %>%
filter(Mutant_Residue != '*', WT_Residue != Mutant_Residue)
dom_eff_candidates <- dms_data_final %>%
separate(col = Mutation, into = c('WT_Residue', 'Position', 'Mutant_Residue'), sep = c(1, -1)) %>%
## Filter by mean of selection coefficient minus 2.5 sd
filter(Selection_coefficient < (mean_stop-cutoff_sd*sd_stop), Mutant_Residue != '*')
dom_eff_candidates <- dms_data_final %>%
separate(col = Mutation, into = c('WT_Residue', 'Position', 'Mutant_Residue'), sep = c(1, -1)) %>%
## Filter by mean of selection coefficient minus 2.5 sd
filter(Selection_coefficient < (mean_stop-cutoff_sd*sd_stop), Mutant_Residue != '*')
dom_eff_candidates_regions <- left_join(x = dom_eff_candidates %>% mutate(Position = as.numeric(Position)),
y = data_annotation_new,
by = c('Position' = 'Position'), relationship = 'many-to-many')
## Alternatively, filter by both the magnitude of the fitness effect and the significance
dom_eff_candidates_regions <- df_volcano_plot_regions %>%
## Filter based on the mean of stop codons - 2.5*(sd of stop codons)
filter(Selection_coefficient < (mean_stop-2.5*sd_stop), p_adj <= 0.05)
dom_eff_candidates_regions_summary <- dom_eff_candidates_regions %>% ungroup() %>%
mutate(Site = factor(Site, levels = unique(data_annotation_new$Site))) %>%
group_by(Site) %>%
summarise(count_mut = n()) %>%
complete(Site, fill = list(count_mut = 0))
## Check the number of positions in each region, excluding positions 1-9 because they are not included in the DMS
positions_per_region <- data_annotation_new %>% ungroup() %>%
mutate(Site = factor(Site, levels = unique(data_annotation_new$Site))) %>%
filter(Position >= 10) %>%
group_by(Site) %>%
summarise(position_count = n()) %>%
complete(Site, fill = list(count_mut = 0))
positions_per_region %<>% mutate(available_missense_mut = position_count*19)
test_positions <- data_annotation_new %>% ungroup() %>%
filter(Position >= 10)
length(table(unique(test_positions$Position)))
## Merge the number of total positions and the number of dominant negative candidates
dom_eff_abundance <- inner_join(x = dom_eff_candidates_regions_summary,
y = positions_per_region,
by = c('Site' = 'Site')
)
dom_eff_abundance_long <- dom_eff_abundance %>%
select(-position_count) %>%
pivot_longer(cols = c('count_mut', 'available_missense_mut'), names_to = 'Count_type', values_to = 'Count_val')
## Add an estimation of observed vs expected ##
total_candidates <- nrow(dom_eff_candidates)
total_missense <- length(table(unique(test_positions$Position))) * 19
dom_eff_abundance %<>%
mutate(expected_dom_eff = round(available_missense_mut*(total_candidates / total_missense), 2))
dom_eff_abundance_long <- dom_eff_abundance %>%
select(-position_count) %>%
pivot_longer(cols = c('count_mut', 'expected_dom_eff'),
names_to = 'Count_type', values_to = 'Count_val')
dom_eff_abundance_long <- dom_eff_abundance %>%
select(-position_count) %>%
pivot_longer(cols = c('count_mut', 'expected_dom_eff', 'available_missense_mut'),
names_to = 'Count_type', values_to = 'Count_val')
## Another alternative, this time as a relative enrichment (observed / expected) ##
dom_eff_abundance %<>%
mutate(relative_enrichment = count_mut / expected_dom_eff,
Background = 'CDS') %>%
rowwise() %>%
mutate(
label_enrichment = str_c(toString(round(relative_enrichment, 2)), '\n',
'(', toString(count_mut), '/', toString(round(expected_dom_eff, 2)), ')')
)
## Another alternative, this time as a relative enrichment (observed / expected) ##
dom_eff_abundance %<>%
mutate(relative_enrichment = count_mut / expected_dom_eff,
Background = 'Duplicated') %>%
rowwise() %>%
mutate(
label_enrichment = str_c(toString(round(relative_enrichment, 2)), '\n',
'(', toString(count_mut), '/', toString(round(expected_dom_eff, 2)), ')')
)
max_rel_enrichment <- max(dom_eff_abundance$relative_enrichment)
rel_enrichment_margin <- 3
601
## A variable for the position of labels on Fig 3C
rel_enrichment_margin <- 3
## Refactor according to the enrichment value
dom_eff_abundance_order <- dom_eff_abundance  %>% arrange(relative_enrichment)
dom_eff_abundance %<>%
mutate(Site = factor(Site, levels = dom_eff_abundance_order$Site))
p_fig3D <- dom_eff_abundance %>%
ggplot(aes(x = Site, y = relative_enrichment)) +
geom_bar(stat = 'identity') +
geom_hline(yintercept = 1, linetype = 'dashed') +
geom_label(aes(label = label_enrichment, x = Site, y = relative_enrichment + 0.5),
vjust = 0.5, size = 3
) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)
) +
# xlab('Regions with negative interference effects') +
xlab('') +
ylab('Relative enrichment\n(neg. int. mutations)') +
# labs(fill = '') +
# ggtitle('CDS') +
ylim(0, max_rel_enrichment + rel_enrichment_margin) +
## Draw images of the protein on top of the figure
draw_image('../Yacine/Scripts/Figures_structures/2rk1_disordered_region4_transparent.png',
x = 0.5, y = 2, scale = 2.5) + # Disordered region
draw_image('../Yacine/Scripts/Figures_structures/2rk1_unannotated4_transparent.png',
x = 1.5, y = 2, scale = 2.25) + # Unannotated
draw_image('../Yacine/Scripts/Figures_structures/2rk1_dimer_interface4_transparent.png',
x = 2.5, y = 2.5, scale = 2.25) + # Dimerization interface
draw_image('../Yacine/Scripts/Figures_structures/2rk1_only_NADPH4_transparent.png',
x = 3.5, y = 3.75, scale = 2.25) + # Only NADPH
draw_image('../Yacine/Scripts/Figures_structures/2rk1_buried5_transparent.png',
x = 4.5, y = 4.5, scale = 2.25) + # Buried residues
draw_image('../Yacine/Scripts/Figures_structures/2rk1_tetramer_interface4_transparent.png',
x = 5.5, y = 5, scale = 2.25) + # Tetramerization interface
draw_image('../Yacine/Scripts/Figures_structures/2rk1_NADPH4_transparent.png',
x = 6.5, y = 6.5, scale = 2.25) + # NADPH binding
draw_image('../Yacine/Scripts/Figures_structures/2rk1_catalytic4_transparent.png',
x = 7.5, y = 9.25, scale = 2.25) # Catalytic residues
p_fig3D
606
## Draw figure 3C
p_fig3C <- dom_eff_abundance %>%
mutate(Site = case_when(
Site == 'Disordered region' ~ 'Disordered\nregion',
Site == 'Dimerization interface' ~ 'Dimerization\ninterface',
Site == 'Binding only NADPH' ~ 'Binding only\nNADPH',
Site == 'Buried residues' ~ 'Buried\nresidues',
Site == 'Tetramerization interface' ~ 'Tetramerization\ninterface',
Site == 'NADPH binding' ~ 'NADPH\nbinding',
Site == 'Cat. residues/DHF binding' ~ 'Cat. residues/\nDHF binding',
Site == 'Unannotated' ~ 'Unannotated'
)
) %>%
filter(Site != 'Binding only\nNADPH') %>%
mutate(Site = factor(Site,
levels = c('Disordered\nregion', 'Unannotated', 'Dimerization\ninterface',
'Buried\nresidues', 'Tetramerization\ninterface',
'NADPH\nbinding', 'Cat. residues/\nDHF binding')
)
) %>%
ggplot(aes(x = Site, y = relative_enrichment)) +
geom_bar(stat = 'identity', aes(fill = Site)) +
geom_hline(yintercept = 1, linetype = 'dashed') +
geom_label(aes(label = label_enrichment, x = Site, y = relative_enrichment + 1),
vjust = 0.5, size = 3.5
) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
legend.position = 'none'
) +
xlab('') +
ylab('Relative enrichment\n(neg. int. mutations)') +
ylim(0, max_rel_enrichment + rel_enrichment_margin) +
scale_fill_manual(values = c('#000000', # Disordered region
'#999999', # Unannotated
'#8803fc', # Dimerization interface
'#ff4d4d', # Buried residues
'#ff6600', # Tetramerization interface
'#56B4E9', # NADPH binding
'#E69F00' # Cat residues/DHF binding
)
)
p_fig3C
## Load the list of dominant negative mutations
# dom_neg_mut <- read_delim('Figures/2024-10-04_negative_interference/CDS/dom_eff_candidates_regions_CDS.tsv',
#                           delim = '\t')
dom_neg_mut <- dom_eff_candidates
## Read the FoldX mutational effects
# foldx_effects <- read_excel('Data/Data_Cisneros2023/sciadv.add9109_tables_s1_to_s12.xlsx',
#                             sheet = 'TableS3_DMS_selection_coefficie', skip = 1)
foldx_effects <- read_delim('Data/sciadv.add9109_table_s3_with_HETddGs.tsv', delim = '\t')
foldx_effects %>% filter(Position == 67, WT_Residue == 'Q', Residue == 'C')
foldx_effects %>% filter(Position == 67, WT_Residue == 'Q', Residue == 'C') %>%
select(Mean_ddG_int_HET_A_D)
foldx_effects %>% filter(Position == 59, WT_Residue == 'S', Residue == 'Y') %>%
select(Mean_ddG_int_HET_A_D)
foldx_effects %>% filter(Position == 59, WT_Residue == 'S', Residue == 'Y') %>%
select(Mean_ddG_int_HM_A_D)
## Load the table with all the selection coefficients
all_dms_cds <- read_delim('Data/all_DMS_regions_Duplicated.tsv', delim = '\t')
## Load the table with all the selection coefficients
all_dms_cds <- read_delim('../../../../Florian_DfrB1_Duplication/Data/all_DMS_regions_Duplicated.tsv', delim = '\t')
## Load the table with all the selection coefficients
all_dms_cds <- read_delim('../../../../Yacine/Data/all_DMS_regions_Duplicated.tsv', delim = '\t')
711
View(df_volcano_plot_regions)
all_dms_cds <- df_volcano_plot_regions
## Load the table with all the selection coefficients
all_dms_cds <- df_volcano_plot_regions
foldx_effects_summary <- foldx_effects %>% ungroup() %>%
filter(Residue != '*', Position >= 22) %>%
group_by(Position, WT_Residue, Residue) %>%
summarise(Mean_ddG_stab_HET = mean(as.numeric(Mean_ddG_stab_HET)),
Mean_ddG_int_HM_A_C = mean(as.numeric(Mean_ddG_int_HM_A_C)),
Mean_ddG_int_HM_A_D = mean(as.numeric(Mean_ddG_int_HM_A_D)),
Mean_ddG_int_HET_A_C = mean(as.numeric(Mean_ddG_int_HET_A_C)),
Mean_ddG_int_HET_A_D = mean(as.numeric(Mean_ddG_int_HET_A_D))
)
## Merge the dataframes
all_dms_foldx <- inner_join(x = all_dms_cds %>% select(Position, WT_Residue, Mutant_Residue,
Selection_coefficient, pval, p_adj, Site),
y = foldx_effects_summary,
by = c('Position' = 'Position', 'WT_Residue' = 'WT_Residue',
'Mutant_Residue' = 'Residue'))
#### Load the Rosetta data for binding to NADPH or DHF ####
rosetta_data_nadph <- read_delim('Data/all_results_DMS_NADPH_formatted.tsv',
delim = '\t')
rosetta_data_dhf_nadph <- read_delim('Data/all_results_DMS_NADPH_DHF_formatted.tsv',
delim = '\t')
## Concatenate the Rosetta results
rosetta_data_tmp <- left_join(x = rosetta_data_dhf_nadph %>%
mutate(total_score_dhf = total_score) %>%
select(mutation_label, state, energy_unit, total_score_dhf) %>%
filter(state == 'ddg') %>%
group_by(mutation_label, state, energy_unit) %>%
summarise(total_score_dhf = mean(total_score_dhf)),
y = rosetta_data_nadph %>%
mutate(total_score_nadph = total_score) %>%
select(mutation_label, state, energy_unit, total_score_nadph) %>%
filter(state == 'ddg') %>%
group_by(mutation_label, state, energy_unit) %>%
summarise(total_score_nadph = mean(total_score_nadph)),
by = c('mutation_label' = 'mutation_label', 'state' = 'state',
'energy_unit' = 'energy_unit')
)
## Distinguish among configurations of corresponding homo- or heterotetramers
rosetta_data_final <- rosetta_data_tmp %>%
separate(mutation_label, into = c('mutA', 'mutB', 'mutC', 'mutD'), sep = '_', remove = F) %>%
mutate(het_type = case_when(
mutA != mutB & mutB == mutC & mutC == mutD & mutA == 'WT' ~ 'het_mut3_WT1',
mutA != mutB & mutB == mutC & mutC == mutD & mutA != 'WT' ~ 'het_mut1_WT3',
mutA != mutB & mutA == mutD & mutB == mutC & mutA != 'WT' ~ 'het_mut2_AD', # Tetramerization interface
mutA != mutB & mutA == mutC & mutB == mutD & mutA != 'WT' ~ 'het_mut2_AC', # Dimerization interface
mutA == mutB & mutB != mutC & mutC == mutD & mutA != 'WT' ~ 'het_mut2_AB', # Crossed
mutA != 'WT' & mutB != 'WT' & mutC != 'WT' & mutD != 'WT' ~ 'hm_mut'
)
) %>%
# Prepare columns so that we can merge by the mutation
mutate(Mutation = case_when(
mutA != 'WT' ~ mutA,
mutB != 'WT' ~ mutB,
mutC != 'WT' ~ mutC,
mutD != 'WT' ~ mutD
)) %>%
separate(Mutation, into =  c('WT_Residue', 'Position', 'Residue'), sep = c(1, -1)) %>%
mutate(Position = as.numeric(Position))
## Filter effects on binding when the mutation is present on all four chains
rosetta_data_final_hm <- rosetta_data_final %>% ungroup() %>% filter(het_type == 'hm_mut') %>%
mutate(Mean_ddG_NADPH = total_score_nadph,
Mean_ddG_DHF = total_score_dhf) %>%
select(WT_Residue, Position, Residue, Mean_ddG_NADPH, Mean_ddG_DHF)
all_dms_foldx <- left_join(x = all_dms_foldx,
y = rosetta_data_final_hm,
by = c('WT_Residue' = 'WT_Residue',
'Position' = 'Position',
'Mutant_Residue' = 'Residue')
)
View(all_dms_foldx %>% filter(Position == 67))
## Indicate the dominant negative mutations in this dataset
dom_neg_mut %<>% rowwise() %>%
mutate(mut_str = str_c(WT_Residue, Position, Mutant_Residue, sep = ''))
all_dms_foldx_DN <- all_dms_foldx %>% rowwise() %>%
mutate(mut_str = str_c(WT_Residue, Position, Mutant_Residue, sep = '')) %>%
mutate(DN_bool = ifelse(mut_str %in% dom_neg_mut$mut_str, 'Neg. interference', 'Other'))
all_dms_foldx_DN_long <- all_dms_foldx_DN %>% ungroup() %>%
select(-Mean_ddG_int_HET_A_C, -Mean_ddG_int_HET_A_D) %>%
group_by(mut_str, DN_bool, Site) %>%
pivot_longer(cols = c('Mean_ddG_stab_HET', 'Mean_ddG_int_HM_A_C', 'Mean_ddG_int_HM_A_D',
'Mean_ddG_NADPH', 'Mean_ddG_DHF'),
names_to = 'ddG_type', values_to = 'ddG_value') %>%
mutate(ddG_type = case_when(
ddG_type == 'Mean_ddG_stab_HET' ~ 'Folding',
ddG_type == 'Mean_ddG_int_HM_A_C' ~ 'Dimerization',
ddG_type == 'Mean_ddG_int_HM_A_D' ~ 'Tetramerization',
ddG_type == 'Mean_ddG_NADPH' ~ 'NADPH binding',
ddG_type == 'Mean_ddG_DHF' ~ 'DHF binding'
)
) %>%
mutate(ddG_type = factor(ddG_type, levels = c('Folding', 'Dimerization', 'Tetramerization',
'NADPH binding', 'DHF binding')))
## Make sure mutations are not repeated when they appear in multiple regions
all_dms_foldx_DN_long_unique <- all_dms_foldx_DN_long %>% ungroup() %>%
group_by(Position, WT_Residue, Mutant_Residue, DN_bool, ddG_type) %>%
summarise(ddG_value = mean(ddG_value)) %>%
ungroup() %>%
mutate(ddG_type = factor(ddG_type)) %>%
group_by(ddG_type)
## Organize the data to estimate p-values
comps <- compare_means(ddG_value~DN_bool,
data = all_dms_foldx_DN_long_unique,
paired = F,
method = 'wilcox.test',
group.by = 'ddG_type') %>%
mutate(p.format = ifelse(p < 2.2e-16, 'p < 2.2e-16',
ifelse(p > 0.01, str_c('p = ', round(as.numeric(p), 2), sep = ''),
sprintf("p = %2.1e", as.numeric(p)))
),
y_pos = c(11, 11, 11, 11, 11)
) %>%
mutate(ddG_type = factor(ddG_type,
levels = c('Folding', 'Dimerization', 'Tetramerization',
'NADPH binding', 'DHF binding')))
mut_counts <- all_dms_foldx_DN_long_unique %>% ungroup() %>%
select(Position, Mutant_Residue, WT_Residue, DN_bool) %>%
unique() %>% group_by(DN_bool) %>%
summarise(count = n())
View(mut_counts)
## Draw the figure
p_fig3B <- all_dms_foldx_DN_long_unique %>% ungroup() %>%
mutate(ddG_type = factor(ddG_type,
levels = c('Folding', 'Dimerization', 'Tetramerization',
'NADPH binding', 'DHF binding')),
DN_bool = case_when(
DN_bool == 'Neg. interference' ~ 'Neg. interference\n(n = 63)',
DN_bool == 'Other' ~ 'Other (n = 1076)'
)) %>%
ggplot(aes(x = DN_bool, y = ddG_value)) +
facet_wrap(~factor(ddG_type, levels = c('Folding', 'Dimerization', 'Tetramerization',
'NADPH binding', 'DHF binding')),
ncol = 5) +
geom_boxplot(outlier.shape = NA, width = 0.7, alpha = 0.3, aes(fill = DN_bool)) +
geom_violin(width = 0.7, alpha = 0.3, scale = 'width', aes(fill = DN_bool)) +
scale_fill_manual(values = c('#1a53ff', 'black')) +
scale_colour_manual(values = c('#1a53ff', 'black')) +
ylim(-2, 12) +
theme(legend.position = 'none', legend.justification = 'center') +
labs(fill = '', colour = '',
y = expression(bold('\u0394\u0394G'))) +
geom_hline(yintercept = 0, linetype = 'dashed') +
xlab('') +
theme(
axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
legend.position = 'none'
) +
geom_signif(data = as.data.frame(comps) %>% ungroup() %>%
mutate(ddG_type = as.character(ddG_type),
group1 = as.character(group1),
group2 = as.character(group2)
) %>%
mutate(group1 = case_when(
group1 == 'Neg. interference' ~ 'Neg. interference\n(n = 63)',
group1 == 'Other' ~ 'Other (n = 1076)'
),
group2 = case_when(
group2 == 'Neg. interference' ~ 'Neg. interference\n(n = 63)',
group2 == 'Other' ~ 'Other (n = 1076)'
)),
aes(xmin = group1, xmax = group2,
annotations=p.format,
y_position = y_pos
),
manual = TRUE, textsize = 4,
tip_length = 1)
p_fig3B
## Check for mutations that have a ddG higher than 1.5
DN_mut_dim_interface <- all_dms_foldx_DN %>%
filter(Mean_ddG_int_HM_A_C >= 1.5, DN_bool == 'Neg. interference')
## Draw figure 3
p_fig3_top <- plot_grid(p_fig3A_boxplot, p_fig3B, nrow = 1,
labels = c('A', 'B'),
label_size = panel_label_size, label_fontface = 'bold',
rel_widths = c(0.35, 1)
)
p_fig3 <- plot_grid(p_fig3_top, p_fig3C, nrow = 2,
labels = c('', 'C'),
label_size = panel_label_size, label_fontface = 'bold',
rel_heights = c(1, 1))
ggsave(p_fig3, device = cairo_pdf,
width = 26, height = 20,
dpi = 300, units = 'cm',
filename = 'Figures/Fig3.pdf'
)
#### Prepare supplementary table 2 with the DMS and biophysical effects ####
table_s2 <- left_join(dms_data_final_both %>%
separate(col = Mutation, into = c('WT_Residue', 'Position', 'Mutant_Residue'),
sep = c(1, -1)) %>%
mutate(Position = as.numeric(Position)),
all_dms_foldx %>%
select(Position, WT_Residue, Mutant_Residue,
Mean_ddG_stab_HET, Mean_ddG_int_HM_A_C, Mean_ddG_int_HM_A_D,
Mean_ddG_NADPH, Mean_ddG_DHF) %>%
unique(),
by = c('WT_Residue' = 'WT_Residue', 'Position' = 'Position',
'Mutant_Residue' = 'Mutant_Residue')) %>%
arrange(Position, Mutant_Residue)
colnames(table_s2) <- c("WT_Residue", "Position", "Mutant_Residue",
"Selection_coefficient_Duplicated", "Selection_coefficient_Singleton",
"Foldx_ddG_folding", "Foldx_ddG_dimerization", "Foldx_ddG_tetramerization",
"FlexddG_ddG_NADPH", "FlexddG_ddG_DHF")
mutation_counts <- all_dms_foldx_DN_long %>% ungroup() %>%
filter(Site %in% c('Cat. residues/DHF binding', 'NADPH binding', 'Tetramerization interface')) %>%
group_by(Site, DN_bool, ddG_type) %>%
summarise(count = n()) %>% rowwise() %>%
mutate(label = str_c('n = ', count, sep = ''))
p_figS4 <- all_dms_foldx_DN_long %>%
filter(Site %in% c('Cat. residues/DHF binding', 'NADPH binding', 'Tetramerization interface')) %>%
ggplot(aes(x = DN_bool, y = ddG_value)) +
facet_grid(ddG_type~Site) +
geom_jitter(width = 0.15, aes(colour = DN_bool), alpha = 0.3) +
geom_boxplot(outlier.shape = NA, width = 0.7, alpha = 0.3, aes(fill = DN_bool)) +
geom_violin(width = 0.7, alpha = 0.3, scale = 'width', aes(fill = DN_bool)) +
scale_fill_manual(values = c('#1a53ff', 'black')) +
scale_colour_manual(values = c('#1a53ff', 'black')) +
ylim(-5, 10) +
theme(legend.position = 'none', legend.justification = 'center',
strip.text = element_text(size = 10)) +
labs(fill = '', colour = '',
y = expression(bold('\u0394\u0394G'))) +
geom_hline(yintercept = 0, linetype = 'dashed') +
xlab('') +
stat_compare_means(paired = F,
# method = 't.test',
method = 'wilcox.test',
comparisons = list(c('Neg. interference', 'Other')
), label.y = 7.5, tip.length = 0.005,
aes(label = str_c('p = ', ..p.format.., sep = ''))
) +
geom_text(data = mutation_counts, y = -4, aes(label = label))
p_figS4
## Save table S1 (selection coefficients for codons)
dms_data_codon <- dms_data %>% ungroup() %>%
group_by(Background, Run, Mutation, Genetic_code) %>%
summarise(Selection_coefficient = mean(Selection_coefficient)) %>% ungroup() %>%
group_by(Background, Mutation, Genetic_code) %>%
summarise(Selection_coefficient = mean(Selection_coefficient))
dms_data_codon_wide <- dms_data_codon %>% ungroup() %>%
pivot_wider(names_from = Background, names_prefix = 'Selection_coefficient_',
values_from = Selection_coefficient)
View(dms_data_codon_wide)
